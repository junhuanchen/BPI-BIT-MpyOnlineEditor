<html>
	<head>
		<title>WebDAV List</title>
		<style>
		#customers
		{
			font-family:"Trebuchet MS", Arial, Helvetica, sans-serif;
			width:100%;
			border-collapse:collapse;
		}
		#customers td, #customers th 
		{
			font-size:1em;
			border:1px solid #98bf21;
			padding:3px 7px 2px 7px;
		}
		#customers th 
		{
			font-size:1.1em;
			text-align:left;
			padding-top:5px;
			padding-bottom:4px;
			background-color:#A7C942;
			color:#ffffff;
		}
		#customers tr.alt td 
		{
			color:#000000;
			background-color:#EAF2D3;
		}
		</style>
	</head>
	
	<body onload="RunInit();">
		<div id="list">
			<h2><p align="center"><a href="/upload.htm"> Upload New File </a></p></h2>
		</div>
		<table id="customers">
			<thead>
				<tr>
				<th>FileName</th>
				<th>FileSize</th>
				<th>Operator</th>
				</tr>
			</thead>
			<tbody id='tbody'>
			</tbody>
		</table>
			<script type="text/javascript" src="dav.js"></script>
		<script>
			OutPutDivID = 'list';
			BaseDir = '/';
			
			var client = new davlib.DavClient();
			client.initialize(location.hostname, 80, 'http', 'user', 'password');

			function writeToDiv(line, emphasize) {
				var div = document.getElementById(OutPutDivID);
				var textnode = document.createTextNode(line);
				var newdiv = document.createElement('div');
				newdiv.appendChild(textnode);
				if (emphasize) {
					newdiv.style.color = 'red';
				} else {
					newdiv.style.color = 'blue';
				};
				div.appendChild(newdiv);
			};

			function assert(statement, debugprint) {
				if (!statement) {
					writeToDiv('FAILURE: ' + debugprint, 1);
				} else {
					writeToDiv('success');
				};
			};

			function wrapContinueHandler(handler) {
				return function(status, statusstr, content) {
					// writeToDiv('status: ' + status + ' (' + statusstr + ')');
					handler(status, content);
				};
			};
			
			function GetDirHandler(status, content) {
				if (status == 207) {
					// writeToDiv('Files found:');
					if (content) {
						var parser, doc = null;
						if (window.DOMParser) {
							parser = new DOMParser();
							doc = parser.parseFromString(string.deentitize(content), "application/xml");
							set = doc.getElementsByTagName("d:response");
							flag_file_size = "d:getcontentlength"
						} else { // Internet Explorer :-)
							doc = new ActiveXObject("Microsoft.XMLDOM");
							doc.loadXML(content);
							set = doc.getElementsByTagName("response");
							flag_file_size = "getcontentlength"
						}
				
						// console.log(doc);
						for (i = 1; i < set.length; i++) {
							var file_info = set[i];
							// console.log(file_info);
							
							var tr = document.createElement('tr');
							var td_filename = document.createElement('td');
							var td_filesize = document.createElement('td');
							var td_operator = document.createElement('td');
							
							// td_filename.innerHTML = file_info.getElementsByTagName("name")[0].innerHTML;
							td_filename.innerHTML = file_info.firstChild.innerHTML;
							td_filesize.innerHTML = file_info.getElementsByTagName(flag_file_size)[0].innerHTML;
							td_operator.innerHTML = '<a href=/editor.htm?filename=' + td_filename.innerHTML + '><button>editor</button></a><button onclick=onDelFile("' + td_filename.innerHTML + '")>delete</button><a href=/edit.htm?filename=' + td_filename.innerHTML + '><button>edit not net</button></a>';
							
							tr.appendChild(td_filename);
							tr.appendChild(td_filesize);
							tr.appendChild(td_operator);
							
							var tbody = document.getElementById('tbody');
							tbody.appendChild(tr);
						}
					};
				} else {
					writeToDiv('FAILED', true);
				};
			};

			function GetFileHandler(status, content) {
				if (status == 200) {
					writeToDiv('Files Text:');
					writeToDiv(content);
					// console.log(content);
				} else {
					writeToDiv('FAILED', true);
				};
			};
			
			function PutFileHandler(status, content) {
				if (status == 201) {
					writeToDiv('OK');
				} else {
					writeToDiv('FAILED', true);
				};
			};
			
			function delFile(status, content) {
				if (status == 204) {
					alert('delFile ok');
					location.reload();
				} else {
					writeToDiv('FAILED', true);
				};
			};
			
			function onDelFile(filename)
			{
				client.DELETE(BaseDir + filename, wrapContinueHandler(delFile), this, 1);
			}
			
			function RunInit() {
				// writeToDiv('Going to read directory ' + BaseDir);
				client.PROPFIND(BaseDir, wrapContinueHandler(GetDirHandler), this, 1);
				
				/*
				filename = 'test.txt';
				
				writeToDiv('Going to write file ' + filename);
				client.PUT(BaseDir + filename, Math.random().toString(), wrapContinueHandler(PutFileHandler), this, 1);
				
				writeToDiv('Going to read file ' + filename);
				client.GET(BaseDir + filename, wrapContinueHandler(GetFileHandler), this, 1);
				
				writeToDiv('Going to delete file ' + filename);
				client.DELETE(BaseDir + filename, function Handler(status, content) {}, this, 1);
				
				*/
			};
			
		</script>
		
	</body>
</html>